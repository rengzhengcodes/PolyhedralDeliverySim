-   p_src: "{ [xs, ys] -> [d0, d1] : d0=xs and d1=ys and 0 <= xs < 8 and 0 <= ys < 8 }"
    p_dst: "{ [xd, yd] -> [d0, d1] : d0=xd and 0 <= d1 < 8 and 0 <= xd < 8 and 0 <= yd < 8 }"
    p_dist: &2d_manhattan_dist | 
        {
            [[xd, yd] -> [xs, ys]] -> [(xd - xs) + (yd - ys)] : 
                xd >= xs and yd >= ys;
            [[xd, yd] -> [xs, ys]] -> [-(xd - xs) + -(yd - ys)] : 
                xd < xs and yd < ys;
            [[xd, yd] -> [xs, ys]] -> [-(xd - xs) + (yd - ys)] : 
                xd < xs and yd >= ys;
            [[xd, yd] -> [xs, ys]] -> [(xd - xs) + -(yd - ys)] : 
                xd >= xs and yd < ys
        }
    expected:
        latency: "{ [7] }"
-   p_src: "{ [xs, ys] -> [d0, d1] : d0 = xs and 0 <= d1 < 8 and 0 <= xs < 8 and 0 <= ys < 8 }"
    p_dst: "{ [xd, yd] -> [d0, d1] : d0 = xd and d1 = yd and 0 <= xd < 8 and 0 <= yd < 8 }"
    p_dist: *2d_manhattan_dist
    expected:
        latency: "{ [0] }"
-   p_src: "{ [xs, ys] -> [d0, d1] : 0 <= d0 < 8 and 0 <= d1 < 8 and (xs=0 or 3<=xs<=4 or xs=7) and (ys=0 or 3<=ys<=4 or ys=7) }"
    p_dst: "{ [xd, yd] -> [d0, d1] : d0 = xd and d1 = yd and 0 <= xd < 8 and 0 <= yd < 8 }"
    p_dist: *2d_manhattan_dist
    expected:
        latency: "{ [2] }"
-   p_src: "{ [xs, ys] -> [d0, d1] : d0 = xs and d1 = ys and 0 <= xs < 8 and 0 <= ys < 8 }"
    p_dst: "{ [xd, yd] -> [d0, d1] : 0 <= d0 < 8 and 0 <= d1 < 8 and (xd=0 or 3<=xd<=4 or xd=7) and (yd=0 or 3<=yd<=4 or yd=7) }"
    p_dist: *2d_manhattan_dist
    expected:
        latency: "{ [14] }"
-   p_src: | 
        { [xs, ys] -> [d0, d1] : 
            0 <= d0 < 3 and 0 <= d1 < 3 and 
            0 <= xs < 9 and 0 <= ys < 9 and xs % 3 = 1 and ys % 3 = 1
        }
    p_dst: "{ [xd, yd] -> [d0, d1] : d0 = xd % 3 and d1 = yd % 3 and 0 <= xd < 9 and 0 <= yd < 9 }"
    p_dist: *2d_manhattan_dist
    expected:
        latency: "{ [2] }"
-   p_src: "{ [xs, ys] -> [d0, d1] : d0 = xs % 3 and d1 = ys % 3 and 0 <= xs < 9 and 0 <= ys < 9}"
    p_dst: |
        { [xd, yd] -> [d0, d1] : 
            0 <= d0 < 3 and 0 <= d1 < 3 and 
            0 <= xd < 9 and 0 <= yd < 9 and xd % 3 = 1 and yd % 3 = 1
        }
    p_dist: *2d_manhattan_dist
    expected:
        latency: "{ [2] }"
-   p_src: "{ [xs, ys] -> [d0] : d0=xs and 0 <= xs < 8 and ys = 0}"
    p_dst: "{ [xd, yd] -> [d0] : d0=xd and 0 <= xd < 8 and 0 <= yd < 8 }"
    p_dist: *2d_manhattan_dist
    expected:
        latency: "{ [7] }"
-   p_src: "{ [xs, ys] -> [d0] : d0=xs and 0 <= xs < 8 and 0 <= ys < 8 }"
    p_dst: "{ [xd, yd] -> [d0] : d0=xd and 0 <= xd < 8 and yd = 0 }"
    p_dist: *2d_manhattan_dist
    expected:
        latency: "{ [0] }"
-   p_src: |
        { [xs, ys, z1s, z2s] -> [d0, d1, d2, d3] : 
            d0 = xs and d1 = ys and d2 = z1s and d3 = z2s and 
            0 <= xs < 8 and 0 <= ys < 8 and 0 <= z1s < 8 and 0 <= z2s < 8
        }
    p_dst: |
        { [xd, yd, z1d, z2d] -> [d0, d1, d2, d3] :
            0 <= d0 < 8 and 0 <= d1 < 8 and 0 <= d2 < 8 and 0 <= d3 < 8 and 
            xd=0 and yd=0 and z1d=0 and z2d=0
        }
    p_dist: &4d_manhattan_dist |
        {
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + (yd - ys) + (z1d - z1s) + (z2d - z2s)] : 
                (xd >= xs) and (yd >= ys) and (z1d >= z1s) and (z2d >= z2s); 

            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + (yd - ys) + (z1d - z1s) + (z2d - z2s)] : 
                (xd < xs) and (yd >= ys) and (z1d >= z1s) and (z2d >= z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + -(yd - ys) + (z1d - z1s) + (z2d - z2s)] : 
                (xd < xs) and (yd < ys) and (z1d >= z1s) and (z2d >= z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + -(yd - ys) + -(z1d - z1s) + (z2d - z2s)] : 
                (xd < xs) and (yd < ys) and (z1d < z1s) and (z2d >= z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + -(yd - ys) + -(z1d - z1s) + -(z2d - z2s)] : 
                (xd < xs) and (yd < ys) and (z1d < z1s) and (z2d < z2s); 
            
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + -(yd - ys) + (z1d - z1s) + (z2d - z2s)] : 
                (xd >= xs) and (yd < ys) and (z1d >= z1s) and (z2d >= z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + -(yd - ys) + -(z1d - z1s) + (z2d - z2s)] : 
                (xd >= xs) and (yd < ys) and (z1d < z1s) and (z2d >= z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + -(yd - ys) + -(z1d - z1s) + -(z2d - z2s)] : 
                (xd >= xs) and (yd < ys) and (z1d < z1s) and (z2d < z2s); 
            
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + (yd - ys) + -(z1d - z1s) + (z2d - z2s)] : 
                (xd >= xs) and (yd >= ys) and (z1d < z1s) and (z2d >= z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + (yd - ys) + -(z1d - z1s) + -(z2d - z2s)] : 
                (xd >= xs) and (yd >= ys) and (z1d < z1s) and (z2d < z2s); 
            
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + (yd - ys) + (z1d - z1s) + -(z2d - z2s)] : 
                (xd >= xs) and (yd >= ys) and (z1d >= z1s) and (z2d < z2s); 

            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + (yd - ys) + -(z1d - z1s) + -(z2d - z2s)] : 
                (xd < xs) and (yd >= ys) and (z1d < z1s) and (z2d < z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + -(yd - ys) + (z1d - z1s) + -(z2d - z2s)] : 
                (xd < xs) and (yd < ys) and (z1d >= z1s) and (z2d < z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + (yd - ys) + (z1d - z1s) + -(z2d - z2s)] : 
                (xd < xs) and (yd >= ys) and (z1d >= z1s) and (z2d < z2s); 
            
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [-(xd - xs) + (yd - ys) + -(z1d - z1s) + (z2d - z2s)] : 
                (xd < xs) and (yd >= ys) and (z1d < z1s) and (z2d >= z2s); 
            [[xd, yd, z1d, z2d] -> [xs, ys, z1s, z2s]] -> 
            [(xd - xs) + -(yd - ys) + (z1d - z1s) + -(z2d - z2s)] : 
                (xd >= xs) and (yd < ys) and (z1d >= z1s) and (z2d < z2s) 
        }
    expected:
        latency: "{ [28] }"
